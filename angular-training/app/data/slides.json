[
    {
        "content": "title"
    },
    {
        "content": "notes"
    },
    {
        "title": "Contents",
        "content": "contents"
    },
    {
        "title": "Contents",
        "content": "contents_2"
    },
    {
        "title": "Contents",
        "content": "contents_3"
    },
    {
        "content": "introduction/introduction_title"
    },
    {
        "title": "Before were the multi-pages apps...",
        "content": "introduction/webapp"
    },
    {
        "title": "Before were the multi-pages apps...",
        "content": "introduction/webapp_bis"
    },
    {
        "title": "Before were the multi-pages apps...",
        "content": "introduction/webapp_slow"
    },
    {
        "title": "Single Page Applications",
        "content": "introduction/single_page_app_intro"
    },
    {
        "title": "Single Page Applications",
        "content": "introduction/single_page_app"
    },
    {
        "title": "Rest API advantages",
        "content": "introduction/rest_api_advantages"
    },
    {
        "title": "Single Page Application Architecture",
        "content": "introduction/single_page_app_architecture"
    },
    {
        "title": "Which JS Framework choose?",
        "content": "introduction/framework_comparison"
    },
    {
        "title": "Introduction to AngularJS",
        "content": "introduction/angular_js_intro"
    },
    {
        "title": "What makes AngularJS so fun to use?",
        "content": "introduction/angular_js_plus"
    },
    {
        "content": "concepts/demo"
    },
    {
        "content": "concepts/concepts_title"
    },
    {
        "title": "Main concepts",
        "content": "concepts/main_concepts"
    },
    {
        "title": "How does AngularJS work?",
        "content": "concepts/how_it_works"
    },
    {
        "title": "How does AngularJS work?",
        "content": "concepts/how_it_works_2"
    },
    {
        "title": "How does AngularJS work?",
        "content": "concepts/how_it_works_3"
    },
    {
        "title": "Two-Way Data Binding Magic!",
        "content": "concepts/data_binding"
    },
    {
        "title": "Two-Way Data Binding Magic!",
        "content": "concepts/data_binding_2"
    },
    {
        "title": "Two-Way Data Binding Magic!",
        "content": "concepts/data_binding_ex"
    },
    {
        "title": "Two-Way Data Binding Magic!",
        "content": "concepts/data_binding_conclusion"
    },
    {
        "title": "Expressions in AngularJS",
        "content": "concepts/expressions"
    },
    {
        "title": "Expressions in AngularJS",
        "content": "concepts/expressions_2"
    },
    {
        "title": "Expressions in AngularJS",
        "content": "concepts/expressions_3"
    },
    {
        "title": "Expressions in AngularJS",
        "content": "concepts/expressions_ex"
    },
    {
        "title": "MV* and $scope",
        "content": "concepts/scope"
    },
    {
        "title": "$scope and digest cycle",
        "content": "concepts/digest_cycle"
    },
    {
        "title": "$digest",
        "content": "concepts/digest"
    },
    {
        "title": "$apply",
        "content": "concepts/apply"
    },
    {
        "title": "$apply",
        "content": "concepts/apply_2"
    },
    {
        "title": "$scope.$apply() vs $scope.$apply(fn)",
        "content": "concepts/apply_3"
    },
    {
        "title": "$watch",
        "content": "concepts/watch"
    },
    {
        "title": "$watch",
        "content": "concepts/watch_deep"
    },
    {
        "title": "Use of $watch by Angular",
        "content": "concepts/watch_in_angular"
    },
    {
        "title": "Use of $watch by Angular",
        "content": "concepts/watch_ex"
    },
    {
        "title": "To conclude on digest cycle...",
        "content": "concepts/digest_cycle_conclusion"
    },
    {
        "title": "Introduction to Controllers",
        "content": "concepts/controller"
    },
    {
        "title": "How to declare a new controller?",
        "content": "concepts/controller_declaration"
    },
    {
        "title": "Linking controllers to views/templates",
        "content": "concepts/controller_association"
    },
    {
        "title": "Use your controllers correctly!",
        "content": "concepts/controller_correct_use"
    },
    {
        "title": "Controllers inheritance",
        "content": "concepts/controller_inheritance"
    },
    {
        "title": "Controllers inheritance",
        "content": "concepts/controller_inheritance_2"
    },
    {
        "title": "To conclude about controllers...",
        "content": "concepts/controller_ex"
    },
    {
        "title": "Practical Work",
        "content": "tps/concepts_tp"
    },
    {
        "title": "Wait... Didn't we forget something?",
        "content": "other/test_intro"
    },
    {
        "title": "Testing Angular applications",
        "content": "other/test"
    },
    {
        "title": "Tests approaches overview",
        "content": "other/test_overview"
    },
    {
        "title": "Setting up your unit tests: Karma",
        "content": "other/karma"
    },
    {
        "title": "karma.conf.js",
        "content": "other/karma_config_file"
    },
    {
        "title": "Simple Unit Test",
        "content": "other/simple_unit_test"
    },
    {
        "title": "Unit testing with angular-mocks",
        "content": "other/unit_testing"
    },
    {
        "title": "protractor",
        "content": "other/protractor"
    },
    {
        "title": "protractor.conf.js",
        "content": "other/protractor_conf_file"
    },
    {
        "title": "e2e testing with Protractor",
        "content": "other/e2e_testing"
    },
    {
        "title": "Testing controllers",
        "content": "other/testing_controllers"
    },
    {
        "title": "Practical Work",
        "content": "tps/controllers_tests_tp"
    },
    {
        "content": "services/services_title"
    },
    {
        "title": "What is a service?",
        "content": "services/services_introduction"
    },
    {
        "title": "How to use a service?",
        "content": "services/services_use"
    },
    {
        "title": "Main Angular services: $http",
        "content": "services/http"
    },
    {
        "title": "Main Angular services: $http",
        "content": "services/http_2"
    },
    {
        "title": "Main Angular services: $http",
        "content": "services/http_3"
    },
    {
        "title": "Main Angular services: $http",
        "content": "services/http_4"
    },
    {
        "title": "Main Angular services: $http",
        "content": "services/http_ex"
    },
    {
        "title" : "RESTful services",
        "content" : "services/restful"
    },
    {
        "title": "Main Angular services: $resource",
        "content": "services/resource"
    },
    {
        "title": "Main Angular services: $resource",
        "content": "services/resource_2"
    },
    {
        "title": "Practical work",
        "content": "tps/resource_tp"
    },
    {
        "title": "Main Angular services: $window",
        "content": "services/window"
    },
    {
        "title": "Main Angular services: $location",
        "content": "services/location"
    },
    {
        "title": "Main Angular services: $location",
        "content": "services/location_2"
    },
    {
        "title": "Main Angular services: $location",
        "content": "services/location_3"
    },
    {
        "title": "Main Angular services: $route",
        "content": "services/route"
    },
    {
        "title": "Multiple Views, Routing and Layout Template",
        "content": "services/routing"
    },
    {
        "title": "Other Angular services",
        "content": "services/other_services"
    },
    {
        "title": "Practical Work",
        "content": "tps/services_use_tp"
    },
    {
        "title": "Creating Angular Services",
        "content": "services/create_intro"
    },
    {
        "title": "What is a module?",
        "content": "services/module"
    },
    {
        "title": "Modules: a good way to organize your application",
        "content": "services/module_best_practices"
    },
    {
        "title": "Services and modules",
        "content": "services/module_services"
    },
    {
        "title": "Services and Providers",
        "content": "services/services_providers"
    },
    {
        "title": "Service injection",
        "content": "services/injection"
    },
    {
        "title": "Creating Angular Services",
        "content": "services/types",
        "remarks": "Il y a 5 manières de créer un service, \
                dont 4 sont réellement différentes. <br/> \
        Pour déclarer un type de service particulier, il faut utiliser la méthode adéquate du module: \
        <ul> \
        <li>Pour un provider: angular.module('monModule').provider(...)</li>\
        <li>Pour un 'service factory': angular.module('monModule').factory(...) </li>\
        <li>Pour une 'factory function': angular.module('monModule').service(...) ou angular.module('monModule').factory(...) (voir exemple plus loin)</li>\
        <li>Pour une value: angular.module('monModule').value(...) </li>\
        <li>Pour une constante: angular.module('monModule').constant(...)\
        </ul>\
        'service factory' et 'factory function' ont les mêmes fonctionalités, seule la syntaxe diffère entre eux. <br />\
        Le provider est le plus complet, car il permet de faire de l'injection de dépendance \
        (le service ainsi défini peut en utiliser d'autres) et il est configurable.\
         La configuration d'un service est une étape qui se fait au chargement de l'application,\
         (voir la configuration des routes dans l'application ecommerce pour un exemple).\
         Cette configuration ne s'effectue pas sur l'instance du service, mais sur son provider\
         (voir plus loin, le provider est l'objet qui contient le service). Par convention, cet objet\
         provider est nommé [nom du service]Provider par angular. <br/>\
         Official documentation <a href='https://docs.angularjs.org/guide/providers'>here</a>"
    },
    {
        "title": "provider()",
        "content": "services/provider"
    },
    {
        "title": "provider()",
        "content": "services/provider_2",
        "remarks":"\
        Ici on déclare 2 providers. L'un sous forme de fonction et l'autre sous forme d'objet.\
        L'essentiel étant que dans un cas comme dans l'autre, notre provider contienne bien une \
        méthode 'get'. Cette méthode retournera le service qui nous intéresse et que nous avons défini.<br/>\
        Ce qu'il faut remarquer ici, c'est que dans le 2nd exemple, le provider est configurabe.\
        En effet, le provider associé à 'CartService' contient deux attributs ainsi que la méthode\
        setMode qui sera donc utilisable au chargement de l'application (encore une fois, voir exemple de\
        la configuration des routes au chargement d'ecommerce)."
    },
    {
        "title": "factory()",
        "content": "services/factory",
        "remarks": "\
        Dans le cas ou on utilise la méthode factory() pour définir notre service, il faut associer\
        au nom de notre service (ici 'UserService') une fonction qui retournera le service en question.\
        L'intéret de cette manière de faire et que cette fonction bénéficie du mécanisme d'IOC d'Angular,\
        on peut donc y injecter d'autres services. <br />\
        TODO: Vérifier s'ils sont configurables, car provider est utilisé pour les définir."
    },
    {
        "title": "service()",
        "content": "services/service",
        "remarks": "\
        The 'service' method is almost the same than the factory one. \
        The difference is that you don't have to define a function which returns\
        the service, but you specify directly the service function to use.\
        If you use DI with the service method then Angular will automatically\
        use the new operator with the specified parameters: <br />\
        <ul>\
        <li>With -> myModule.service('myService', ['myDependency', MyService]) )</li>\
        <li>Angular does -> new MyService(myDependency) </li>\
        </ul>\
        It is just a little bit easier in this specific case, nothing more.\
        "
    },
    {
        "title": "value()",
        "content": "services/value",
        "remarks":"\
        To use when you have already something (function/object), maybe coming from\
        an external library, and that you to make a service from it.\
        The main difference with factory() and service() is that here you\
        can't use DI to include other services, your service has to be independant of\
        other ones"
    },
    {
        "title": "constant()",
        "content": "services/constant"
    },
    {
        "title": "When should you use which way?",
        "content": "services/create_conclusion"
    },
    {
        "title": "When should you use which way?",
        "content": "services/create_conclusion_2"
    },
    {
        "title": "Practical Work",
        "content": "tps/services_create_tp"
    },
    {
        "title": "Testing services",
        "content": "other/testing_services"
    },
    {
        "title": "Practical Work",
        "content": "tps/services_tests_tp"
    },
    {
        "content": "directives/title"
    },
    {
        "title": "What is a directive?",
        "content": "directives/introduction"
    },
    {
        "title": "Why are directives used in Angular?",
        "content": "directives/introduction_2"
    },
    {
        "title": "Invoking directives from HTML",
        "content": "directives/invoking"
    },
    {
        "title": "Invoking directives from HTML",
        "content": "directives/invoking_2"
    },
    {
        "title": "Main Angular directives",
        "content": "directives/main_directives"
    },
    {
        "title": "Event handlers",
        "content": "directives/event_handlers"
    },
    {
        "title": "ng-repeat",
        "content": "directives/ng_repeat"
    },
    {
        "title": "ng-if",
        "content": "directives/ng_if"
    },
    {
        "title": "ng-switch",
        "content": "directives/ng_switch"
    },
    {
        "title": "ng-show/ng-hide",
        "content": "directives/ng_show_hide"
    },
    {
        "title": "ng-style/ng-class",
        "content": "directives/ng_style_class"
    },
    {
        "title": "And many more...",
        "content": "directives/more"
    },
    {
        "title": "directive-start/end",
        "content": "directives/directive_start_end"
    },
    {
        "title": "Practical Work",
        "content": "tps/directives_use_tp"
    },
    {
        "title": "Form elements directives",
        "content": "directives/form_elements"
    },
    {
        "title": "Select component",
        "content": "directives/select"
    },
    {
        "title": "Native Angular directives",
        "content": "directives/angular_directives_ex"
    },
    {
        "title": "Writing directives",
        "content": "directives/create",
        "remarks": "\
        By default, if you don't restrict it, the scope accessible in the directive\
        template is the same than the one of the controller where you use this directive element\
        If you need more info concerning directives, the official documentation is \
        <a href='https://docs.angularjs.org/guide/directive'>here</a> \
        "
    },
    {
        "title": "Using the link function",
        "content": "directives/attribute_link_ex"
    },
    {
        "title": "Attribute restrict",
        "content": "directives/attribute_restrict"
    },
    {
        "title": "Attributes template/templateUrl",
        "content": "directives/attribute_template"
    },
    {
        "title": "Attribute replace",
        "content": "directives/attribute_replace"
    },
    {
        "title": "Attribute transclude",
        "content": "directives/attribute_transclude"
    },
    {
        "title": "Attribute scope",
        "content": "directives/attribute_scope"
    },
    {
        "title": "Isolate scope properties",
        "content": "directives/attribute_scope_local"
    },
    {
        "title": "Isolate scope properties",
        "content": "directives/attribute_scope_local_2"
    },
    {
        "title": "Isolate scope properties",
        "content": "directives/attribute_scope_local_3"
    },
    {
        "title": "Isolate scope properties",
        "content": "directives/attribute_scope_local_4"
    },
    {
        "title": "Using the scope property",
        "content": "directives/attribute_scope_ex"
    },
    {
        "title": "Attribute link",
        "content": "directives/attribute_link"
    },
    {
        "title": "Attribute compile",
        "content": "directives/attribute_compile"
    },
    {
        "title": "Attribute controller",
        "content": "directives/attribute_controller"
    },
    {
        "title": "Attribute require",
        "content": "directives/attribute_require"
    },
    {
        "title": "Attributes priority/terminal",
        "content": "directives/attribute_priority_terminal"
    },
    {
        "title": "Creating new directives",
        "content": "directives/create_directive_ex"
    },
    {
        "title": "Testing directives",
        "content": "other/testing_directives"
    },
    {
        "title": "Testing directives",
        "content": "other/testing_directives_2"
    },
    {
        "title": "Practical work",
        "content": "tps/directives_create_tp"
    },
    {
        "content": "other/title"
    },
    {
        "title": "Using Angular Filters",
        "content": "other/using_filters"
    },
    {
        "title": "Angular main filters",
        "content": "other/angular_filters"
    },
    {
        "title": "Let's use Angular Filters!",
        "content": "other/angular_filters_ex"
    },
    {
        "title": "Creating Angular Filters",
        "content": "other/creating_filters"
    },
    {
        "title": "Testing filters",
        "content": "other/testing_filters"
    },
    {
        "title": "Practical Work",
        "content": "tps/filters_tp"
    },
    {
        "title": "Form Client Validation",
        "content": "other/form_validation"
    },
    {
        "title": "Form Client Validation",
        "content": "other/form_validation_2"
    },
    {
        "title": "Form validation methods",
        "content": "other/form_validation_methods"
    },
    {
        "title": "Using form validation methods",
        "content": "other/form_validation_ex"
    },
    {
        "title": "Services decoration",
        "content": "other/services_decoration"
    },
    {
        "title": "Directives decoration",
        "content": "other/directives_decoration"
    },
    {
        "title": "Lazy Loading",
        "content": "other/lazy_loading"
    },
    {
        "title": "RequireJS",
        "content": "other/requirejs"
    },
    {
        "title": "Registering lazy artifacts",
        "content": "other/register_lazy_artefacts"
    },
    {
        "title": "Registering lazy artifacts",
        "content": "other/register_lazy_artefacts_2"
    },
    {
        "title": "Loading lazy artifacts",
        "content": "other/loading_lazy_artifacts"
    },
    {
        "title": "Security concerns",
        "content": "other/security"
    },
    {
        "title": "User authentication",
        "content": "other/user_authentication"
    },
    {
        "title": "Creating mobile applications",
        "content": "other/mobile_applications"
    },
    {
        "title": "Creating mobile applications 2",
        "content": "other/mobile_applications_2"
    },
    {
        "title": "Automating AngularJS",
        "content": "other/automating_angular"
    },
    {
        "title": "Generating code with Yeoman",
        "content": "other/yeoman"
    },
    {
        "title": "Bower, your web component installer",
        "content": "other/bower"
    },
    {
        "title": "Grunt, the builder and utility tool",
        "content": "other/grunt"
    },
    {
        "title": "Project structure",
        "content": "other/project_structure"
    },
    {
        "content": "conclusion"
    },
    {
        "title": "Conclusion",
        "content": "conclusion_2"
    },
    {
        "content": "questions"
    }
]